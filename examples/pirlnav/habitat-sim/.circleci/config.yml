version: 2.1
gpu: &gpu
  machine:
    # Available images:
    # https://circleci.com/docs/2.0/configuration-reference/#available-linux-gpu-images
    image: ubuntu-2004-cuda-11.4:202110-01
  resource_class: gpu.nvidia.medium
  environment:
    FPS_THRESHOLD: 900
commands:
  install_all_ubuntu_deps:
    description: "Prepares the dependencies"
    steps:
      - run: &install_cmake
          name: Install cmake
          no_output_timeout: 5m
          # OpenEXR requires CMake 3.12. We also download CMake 3.20, which
          # we'll use later for the JS build only.
          command: |
              echo $(git ls-remote https://github.com/facebookresearch/habitat-lab.git HEAD | awk '{ print $1}') > ./hablab_sha
              cat ./hablab_sha
              wget https://cmake.org/files/v3.12/cmake-3.12.4-Linux-x86_64.sh
              wget https://cmake.org/files/v3.20/cmake-3.20.1-linux-x86_64.sh
              sudo mkdir /opt/cmake312
              sudo mkdir /opt/cmake320
              sudo sh ./cmake-3.12.4-Linux-x86_64.sh --prefix=/opt/cmake312 --skip-license
              sudo sh ./cmake-3.20.1-linux-x86_64.sh --prefix=/opt/cmake320 --skip-license
              sudo ln -s /opt/cmake312/bin/cmake /usr/local/bin/cmake
      - run: &install_deps
          name: Install dependencies
          no_output_timeout: 20m
          command: |
              sudo apt-get update || true
              sudo apt-get install -y --no-install-recommends \
                  build-essential \
                  git \
                  curl \
                  vim \
                  ca-certificates \
                  libjpeg-dev \
                  libglm-dev \
                  libegl1-mesa-dev \
                  ninja-build \
                  xorg-dev \
                  freeglut3-dev \
                  pkg-config \
                  wget \
                  zip \
                  lcov\
                  libhdf5-dev \
                  libomp-dev \
                  unzip || true
      - run:
          name: Install Headless Chrome dependencies
          command: |
            sudo apt-get update || true
            sudo apt-get install -yq \
                  gconf-service \
                  libasound2 \
                  libatk1.0-0 \
                  libatk-bridge2.0-0 \
                  libc6 \
                  libcairo2 \
                  libcups2 \
                  libdbus-1-3  \
                  libexpat1 \
                  libfontconfig1 \
                  libgcc1 \
                  libgconf-2-4 \
                  libgdk-pixbuf2.0-0 \
                  libglib2.0-0 \
                  libgtk-3-0 \
                  libnspr4 \
                  libpango-1.0-0 \
                  libpangocairo-1.0-0 \
                  libstdc++6 \
                  libx11-6 \
                  libx11-xcb1 \
                  libxcb1 \
                  libxcomposite1 \
                  libxcursor1 \
                  libxdamage1 \
                  libxext6 \
                  libxfixes3 \
                  libxi6 \
                  libxrandr2 \
                  libxrender1 \
                  libxss1 \
                  libxtst6 \
                  ca-certificates \
                  fonts-liberation \
                  libappindicator1 \
                  libnss3 \
                  lsb-release \
                  xdg-utils \
                  wget
      - run:
          name: Install cuda
          no_output_timeout: 20m
          background: true
          command: |
              # sudo apt-key adv --fetch-keys "https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub"
              # sudo apt-add-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64 /"
              # sudo apt-get update || true
              # sudo apt-get --yes --force-yes install cuda-11-1
              touch ~/cuda_installed
              if command -v nvidia-smi; then nvidia-smi; fi
      - restore_cache:
          keys:
            - conda-{{ checksum "habitat-sim/.circleci/config.yml" }}
      - run: &install_conda
          name: Install conda and dependencies
          no_output_timeout: 20m
          command: |
              if [ ! -d ~/miniconda ]
              then
                curl -o ~/miniconda.sh -O  https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
                chmod +x ~/miniconda.sh
                ~/miniconda.sh -b -p $HOME/miniconda
                rm ~/miniconda.sh
                export PATH=$HOME/miniconda/bin:$PATH
                conda create -y -n habitat python=3.7
                . activate habitat
                # For whatever reason we have to install pytorch first. If it isn't
                # it installs the 1.4 cpuonly version. Which is no good.
                conda install -q -y pytorch torchvision cudatoolkit=11.3 -c pytorch
                conda install -q -y -c conda-forge ninja numpy pytest pytest-cov ccache hypothesis
                pip install pytest-sugar pytest-xdist pytest-benchmark opencv-python
              fi
      - run:
          name: Install emscripten
          no_output_timeout: 20m
          background: true
          command: |
              if [ ! -f ~/emscripten_installed ]
              then
                export PATH=$HOME/miniconda/bin:$PATH
                . activate habitat;
                git clone -q https://github.com/emscripten-core/emsdk.git ~/emsdk
                cd ~/emsdk
                ./emsdk install 1.38.48
                ./emsdk activate 1.38.48
                . ~/emsdk/emsdk_env.sh
                touch ~/emscripten_installed
              fi
      - run:
          name: Install JavaScript dependencies
          background: true
          command: |
              if [ ! -f ~/npm_deps_installed ]
              then
                wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
                . ~/.bashrc
                nvm install v11.9.0
                nvm use v11.9.0
                npm install
                touch ~/npm_deps_installed
              fi
      - restore_cache:
          keys:
            - habitat-lab-{{ checksum "./hablab_sha" }}
      - restore_cache: &ccache_cache
          keys:
            - ccache-{{ arch }}-{{ .Branch }}-{{ .BuildNum }}
            - ccache-{{ arch }}-{{ .Branch }}-
            - ccache-{{ arch }}-main-
          paths:
            - /home/circleci/.ccache
      - run:
          name: CCache initialization
          command: |
            export PATH=$HOME/miniconda/bin:$PATH
            . activate habitat;
            ccache --show-stats
            ccache --zero-stats
            ccache --max-size=10.0G

jobs:
  python_lint:
    docker:
      - image: cimg/python:3.7
    steps:
      - checkout
      - run:
          name: setup
          command: |
              # Updated llvm to v 10
              sudo apt-get update
              sudo apt-get install llvm-10
              cd /usr/bin
              sudo rm  llvm-config
              sudo ln -s llvm-config-10 llvm-config
              cd ~/project/
              pip install -U pip
              pip install -U --prefer-binary \
                black \
                flake8 \
                flake8-bugbear \
                flake8-builtins \
                flake8-comprehensions \
                flake8-return \
                flake8-simplify \
                hypothesis==6.29.3 \
                isort \
                mypy \
                numpy \
                pytest \
                sphinx \
                tqdm
              pip install --prefer-binary -r requirements.txt torch --progress-bar off
      - run:
          name: run black
          command: |
              black --version
              black --exclude '/(\.eggs|\.git|\.hg|\.mypy_cache|\.nox|\.tox|\.venv|_build|buck-out|build|dist)|examples/tutorials/(colabs|nb_python)'  src_python/habitat_sim/. examples/. tests/. setup.py --diff
              black --exclude '/(\.eggs|\.git|\.hg|\.mypy_cache|\.nox|\.tox|\.venv|_build|buck-out|build|dist)|examples/tutorials/(colabs|nb_python)'  src_python/habitat_sim/. examples/. tests/. setup.py --check
      - run:
          name: run isort
          command: |
              isort --version
              isort src_python/habitat_sim/. examples/. tests/. setup.py --diff
              isort src_python/habitat_sim/. examples/. tests/. setup.py --check-only
      - run:
          name: run flake8
          command: |
              flake8 --version
              flake8 src_python/habitat_sim/. examples/. tests/. setup.py
      - run:
          name: run mypy
          command: mypy

  js_lint:
    docker:
      - image: cimg/node:12.20
    steps:
      - checkout
      - run:
          name: setup
          command: |
            npm install
      - run:
          name: run eslint
          command: |
            npm run lint

  pre-commit:
    docker:
      - image: cimg/python:3.7
    working_directory: ~/repo/

    steps:
      - checkout
      - run:
          name: Combine precommit config and python versions for caching
          command: |
            cat .pre-commit-config.yaml > pre-commit-deps.txt
            python -VV >> pre-commit-deps.txt
      - restore_cache:
          keys:
          - v1-precommit-deps-{{ checksum "pre-commit-deps.txt" }}

      - run:
          name: Install Dependencies
          command: |
            pip install -U pip setuptools pre-commit
            # Install the hooks now so that they'll be cached
            pre-commit install-hooks

      - save_cache:
          paths:
            - ~/.cache/pre-commit
          key: v1-precommit-deps-{{ checksum "pre-commit-deps.txt" }}
      - run:
          name: Check Code Style using pre-commit
          command: |
            SKIP=eslint pre-commit run --show-diff-on-failure --all-files
  build_conda_osx:
    description: "Build OSX Conda-Package"
    parameters:
        CI_TEST:
          description: "Do not upload to CONDA_CI_NIGHTLY"
          type: boolean
          default: False
        nightly:
          description: "Whether to build in nightly mode"
          type: boolean
          default: False
        AIHABITAT_CONDA_CHN:
          type: string
          default: "aihabitat"
        AIHABITAT_CONDA_CHN_PWD_VAR:
          type: string
          default: "AIHABITAT_CONDA_PWD"
    macos:
      xcode: 13.0.0
    steps:
      - checkout:
          path: ./habitat-sim
      - run:
          name: Conda Install OSX
          command: |
            curl -o ~/miniconda.sh -O https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh
            chmod +x ~/miniconda.sh
            ~/miniconda.sh -b -p $HOME/miniconda
            rm ~/miniconda.sh
            export PATH=$HOME/miniconda/bin:$PATH
            conda init "$(basename "${SHELL}")"
      - run:
          name: Conda OSX build
          no_output_timeout: 30m
          command: |
            export PATH=$HOME/miniconda/bin:$PATH
            source ~/.bash_profile
            conda activate
            conda install -y anaconda-client ccache cmake git ninja conda-build pip
            echo $(which -a python)
            pip install gitpython
            (yes || true) | anaconda login --username << parameters.AIHABITAT_CONDA_CHN >>  --password $<< parameters.AIHABITAT_CONDA_CHN_PWD_VAR >> --hostname "aihabitat-conda-ci-builder-macos"
            <<^ parameters.CI_TEST>>
            conda config --set anaconda_upload yes <</ parameters.CI_TEST>>
            cd habitat-sim/conda-build
            git submodule update --init --recursive --jobs 8
            export PYTHONIOENCODING="utf-8"
            python matrix_builder.py <<# parameters.CI_TEST>> --ci_test <</ parameters.CI_TEST>>  <<^ parameters.CI_TEST >> --conda_upload <<# parameters.nightly>> --nightly <</ parameters.nightly>> <</ parameters.CI_TEST >>

  clang_tidy:
    machine:
      # Available images:
      # https://circleci.com/docs/2.0/configuration-reference/#available-linux-gpu-images
      image: ubuntu-2004:202201-02
    resource_class: xlarge
    steps:
      - checkout:
          path: ./habitat-sim
      - run: *install_cmake
      - run: *install_deps
      - run: *install_conda
      - restore_cache: *ccache_cache
      - run:
          name: Install clang-tidy
          command: |
              # Bellow is only needed for Ubuntu 20
              sudo apt-key adv --fetch-keys "https://apt.llvm.org/llvm-snapshot.gpg.key"
              sudo add-apt-repository "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-12 main"
              sudo apt-get update -y || true
              sudo apt-get install -y clang-tidy-12
              sudo ln -s /usr/bin/clang-tidy-12 /usr/local/bin/clang-tidy
              clang-tidy --version
      - run:
          name: Build sim
          no_output_timeout: 25m
          command: |
              export PATH=$HOME/miniconda/bin:$PATH
              . activate habitat;
              cd habitat-sim
              pip install -r requirements.txt --progress-bar off
              git submodule update --init --recursive --jobs 8
              python -u setup.py install --build-type "Release" --no-lto --headless --vhacd --bullet
      - run:
          name: run clang-tidy
          command: |
              export PATH=$HOME/miniconda/bin:$PATH
              . activate habitat;
              cd habitat-sim
              python tools/run-clang-tidy.py -header-filter=src/esp src/esp

  test_pip_build:
    <<: *gpu
    steps:
      - checkout
      - run: *install_deps
      - run:
          name: pip install
          command: |
            pyenv install 3.7.10
            pyenv global 3.7.10
            python3 -m pip install -U pip
            python3 -m pip install . -v
            cd ../ && python3 -c "import habitat_sim"

  lab_build_habitat:
    <<: *gpu
    steps:
      - checkout:
          path: ./habitat-sim
      - run:
          name: CPU info
          no_output_timeout: 1m
          command: |
              cat /proc/cpuinfo
      - install_all_ubuntu_deps
      - run: &download_test_data
          name: Download test data
          command: |
              export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
              . activate habitat;

              if [ ! -d ./data/scene_datasets/habitat-test-scenes/van-gogh-room.glb ]
              then
                cd habitat-sim
                python src_python/habitat_sim/utils/datasets_download.py --uids ci_test_assets --replace --data-path data/
              fi

      - run:
          name: Build habitat sim and documentation
          no_output_timeout: 20m
          command: |
              export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
              . activate habitat;
              cd habitat-sim
              git submodule update --init --recursive --jobs 8
              pip install -r requirements.txt --progress-bar off
              pip install imageio imageio-ffmpeg
              conda install -y -c conda-forge doxygen
              conda install -y  jinja2 pygments docutils
              while [ ! -f ~/cuda_installed ]; do sleep 2; done # wait for CUDA
              sudo apt install --allow-change-held-packages \
                  texlive-base \
                  texlive-latex-extra \
                  texlive-fonts-extra \
                  texlive-fonts-recommended

              # Rebuild with all options enabled
              ./build.sh --with-cuda --with-bullet --vhacd
              cd docs
              git submodule update --init
              ./build-public.sh
      - run:
          name: Install Habitat Sim and Habitat Lab
          command: |
              export PATH=$HOME/miniconda/bin:$PATH
              . activate habitat;
              cd habitat-sim
              #Rebuild headless
              python setup.py install --headless --with-bullet --with-cuda --vhacd
              cd ..
              if [ ! -d ./habitat-lab ]
              then
                git clone -q --depth 1 https://github.com/facebookresearch/habitat-lab.git
              fi
              cd habitat-lab
              pip install -r requirements.txt --progress-bar off
              ln -s ../habitat-sim/data data
              touch ~/miniconda/pip_deps_installed
      - run:
          name: Run Habitat Lab tests
          no_output_timeout: 25m
          command: |
              export PATH=$HOME/miniconda/bin:$PATH
              . activate habitat; cd habitat-lab
              python -u setup.py develop --all
              python -u setup.py test
      - save_cache:
          key: habitat-lab-{{ checksum "./hablab_sha" }}
          background: true
          paths:
            - ./habitat-lab
      - run:
          name: Build Habitat Lab documentation
          command: |
              export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
              . activate habitat; cd habitat-lab
              # Install requirments first to avoid errors related to gym
              pip install -r requirements.txt --progress-bar off
              python setup.py develop --all

              cd docs
              conda install -y -c conda-forge doxygen
              conda install -y  jinja2 pygments docutils
              ./build-public.sh
      - save_cache:
          key: conda-{{ checksum "habitat-sim/.circleci/config.yml" }}
          background: true
          paths:
            - ~/miniconda
      - save_cache:
          key: docs-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
          background: true
          paths:
            - ./habitat-sim/build/docs-public
  install_and_test_ubuntu:
    <<: *gpu
    steps:
      - checkout:
          path: ./habitat-sim
      - run:
          name: CPU info
          no_output_timeout: 1m
          command: |
              cat /proc/cpuinfo
      - install_all_ubuntu_deps
      - run:
          name: Build, install habitat-sim and run benchmark
          no_output_timeout: 25m
          command: |
              export PATH=$HOME/miniconda/bin:$PATH
              . activate habitat;
              cd habitat-sim
              pip install -r requirements.txt --progress-bar off
              pip install imageio imageio-ffmpeg
              git submodule update --init --recursive --jobs 8
              python -u setup.py install --build-type "Release" --lto --headless --vhacd --bullet
      - run:
          name: Ccache stats
          when: always
          command: |
            export PATH=$HOME/miniconda/bin:$PATH
            . activate habitat;
            ccache --show-stats
      - run: *download_test_data
      - run:
          name: Build Javascript bindings
          command: |
              # wait for npm and emscripten install
              while [[ ! -f ~/emscripten_installed && ! -f ~/npm_deps_installed ]]; do sleep 2; done
              # switch to cmake 3.20 just for this step. The JS build requires
              # static Bullet libs, and Bullet static libs required CMake 3.13+.
              sudo rm /usr/local/bin/cmake
              sudo ln -s /opt/cmake320/bin/cmake /usr/local/bin/cmake
              cd habitat-sim
              . ~/.bashrc
              export PATH=$HOME/miniconda/bin:$PATH
              . activate habitat
              nvm use v11.9.0
              . ~/emsdk/emsdk_env.sh
              CMAKE_GENERATOR=Ninja ./build_js.sh --bullet
              # switch back to cmake 3.12
              sudo rm /usr/local/bin/cmake
              sudo ln -s /opt/cmake312/bin/cmake /usr/local/bin/cmake
      - run:
          name: Run sim benchmark
          command: |
              export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
              . activate habitat; cd habitat-sim
              python examples/example.py --scene data/scene_datasets/habitat-test-scenes/van-gogh-room.glb --silent --test_fps_regression $FPS_THRESHOLD
      - run:
          name: Run JavaScript tests
          command: |
            cd habitat-sim
            . ~/.bashrc
            export PATH=$HOME/miniconda/bin:$PATH
            . activate habitat
            nvm use v11.9.0
            npm run test
      - run:
          name: Run sim tests
          no_output_timeout: 25m
          command: |
              export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
              . activate habitat; cd habitat-sim

              export PYTHONPATH=$(pwd):$PYTHONPATH
              #This way, pytest shows partial progress
              export PYTHONUNBUFFERED=1
              # CUDA isn't needed until here
              while [ ! -f ~/cuda_installed ]; do sleep 2; done # wait for CUDA

              # run tests with code coverage
              CORRADE_TEST_COLOR=ON GTEST_COLOR=yes ./build.sh --headless \
                --bullet \
                --vhacd \
                --with-cuda \
                --build-datatool \
                --run-tests \
                --no-lto \
                --cmake-args='-DCMAKE_CXX_FLAGS="--coverage"'

              PYTHONPATH=src_python pytest -n 4 --durations=10 --cov-report=xml --cov=./

              #run the marked pytest-benchmark tests and print the results
              PYTHONPATH=src_python pytest -m sim_benchmarks

              #re-build without bullet and cuda and run physics tests again
              #TODO: instead of reinstall, do this with configuration
              ./build.sh --headless --cmake-args='-DCMAKE_CXX_FLAGS="--coverage"'
              PYTHONPATH=src_python pytest -n 4 --durations=10 --cov-report=xml --cov=./ --cov-append tests/test_physics.py tests/test_sensors.py

              . ~/.bashrc
              nvm use v11.9.0
              . ~/emsdk/emsdk_env.sh
              # Generate JS CodeConv
              npm run test_with_coverage
      -  run:
          name: Build, install habitat-sim with audio and run audio_agent script
          no_output_timeout: 10m
          command: |
              export PATH=$HOME/miniconda/bin:$PATH
              . activate habitat;
              cd habitat-sim
              pip install -r requirements.txt --progress-bar off
              pip install imageio imageio-ffmpeg
              git submodule update --init --recursive --jobs 8
              python -u setup.py install --build-type "Release" --lto --headless --audio
              python examples/tutorials/audio_agent.py
      - save_cache:
          key: ccache-{{ arch }}-{{ .Branch }}-{{ .BuildNum }}
          background: true
          paths:
            - /home/circleci/.ccache
      - run:
          name: Upload test coverage
          command: |
              export PATH=$HOME/miniconda/bin:/usr/local/cuda/bin:$PATH
              . activate habitat; cd habitat-sim

              curl -Os https://uploader.codecov.io/latest/linux/codecov
              chmod +x codecov
              #Uploading test coverage for Python code
              ./codecov -f coverage.xml -cF Python

              # Uploading test coverage for JS code
              ./codecov coverage_js/coverage-final.json -cF JavaScript

              #Uploading test coverage for C++ code
              lcov --directory . --capture --output-file coverage.info
              # Replaces -1 linecount with zero to prevent lcov from crashing:
              # https://github.com/psycofdj/coverxygen/issues/6
              sed -i -e 's/,-1$/,0/g' coverage.info
              #lcov --remove coverage.info "*/deps/*" --output-file coverage.info > /dev/null
              #lcov --remove coverage.info "*/test/*" --output-file coverage.info > /dev/null
              #lcov --remove coverage.info "*/tests/*" --output-file coverage.info > /dev/null
              ./codecov -f coverage.info -cF CPP



  build_conda_binaries:
    <<: *gpu
    parameters:
      AIHABITAT_CONDA_CHN:
        type: string
        default: "aihabitat"
      AIHABITAT_CONDA_CHN_PWD_VAR:
        type: string
        default: "AIHABITAT_CONDA_PWD"
      NIGHTLY_FLAG:
        type: string
        default: ""
      CI_TEST:
        type: boolean
        default: false
    steps:
      - checkout:
          path: ./habitat-sim
      - run:
          name: Build conda Linux packages
          no_output_timeout: 240m
          command: |
              # export PATH=$HOME/miniconda/bin:$PATH
              # . activate habitat;

              cd habitat-sim/conda-build
              <<^ parameters.CI_TEST >>
              # Install anaconda to work with packages repo
              curl -O https://repo.anaconda.com/archive/Anaconda3-2020.11-Linux-x86_64.sh
              bash Anaconda3-2020.11-Linux-x86_64.sh -b -p $HOME/anaconda
              export PATH=$HOME/anaconda/bin:$PATH

              # Delete old nightly builds
              python common/delete_old_night_packages.py --username << parameters.AIHABITAT_CONDA_CHN >>  --password $<< parameters.AIHABITAT_CONDA_CHN_PWD_VAR >> << parameters.NIGHTLY_FLAG >> <</ parameters.CI_TEST >>

              # install Docker
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
              sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
              sudo apt-get update
              apt-cache policy docker-ce
              sudo apt-get install -y docker-ce

              docker build -t hsim_condabuild_dcontainer -f Dockerfile .
              docker run -it --ipc=host --rm -v $(pwd)/../../:/remote \
                  <<^ parameters.CI_TEST >> --env << parameters.AIHABITAT_CONDA_CHN_PWD_VAR >> <</ parameters.CI_TEST >> \
                  hsim_condabuild_dcontainer \
                  /bin/bash -c "source ~/.bashrc && conda activate py37 \
                                && cd /remote/habitat-sim/conda-build \
                                <<^ parameters.CI_TEST >> && yes | anaconda login --username << parameters.AIHABITAT_CONDA_CHN >> --password \${<< parameters.AIHABITAT_CONDA_CHN_PWD_VAR >>} <</ parameters.CI_TEST >> --hostname "aihabitat-conda-ci-builder-linux" \
                                && python matrix_builder.py \
                                  <<# parameters.CI_TEST >> --ci_test <</ parameters.CI_TEST>> \
                                  <<^ parameters.CI_TEST >> --conda_upload << parameters.NIGHTLY_FLAG >> <</ parameters.CI_TEST >>"

  update_docs:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - restore_cache:
          key: docs-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
      - add_ssh_keys:
          fingerprints:
            - "18:88:e0:37:b1:b3:7a:23:aa:1e:f7:43:a8:5b:8e:05"
      - run:
          name: Update public documentation
          no_output_timeout: 30m
          command: |
              # Update website
              git clone git@github.com:facebookmicrosites/habitat-website.git
              cd habitat-website
              git submodule update --init

              for dir in habitat-sim habitat-lab
              do
                  rm -rf published/docs/${dir}
                  cp -r ../habitat-sim/build/docs-public/${dir} published/docs/.
              done

              git config --global user.name "Habitat"
              git config --global user.email habitat@fb.com
              NOW=$(date +"%m-%d-%Y")
              git add .
              git diff-index --quiet HEAD || git commit -m "Build habitat-sim and habitat-lab ${NOW}"
              git push origin main

              # Deploy to public
              git checkout gh-pages
              git checkout main published
              sudo apt-get update || true
              sudo apt-get install -yq \
                    rsync
              rsync -a published/ ./.
              rm -rf published
              git add .
              git diff-index --quiet HEAD || git commit -m "Build habitat-sim and habitat-lab ${NOW}"
              git push origin gh-pages

workflows:
  version: 2
  install_and_test:
    jobs:
      - python_lint
      - js_lint
      - lab_build_habitat
      - build_conda_osx:
         CI_TEST: true
      - test_pip_build
      - install_and_test_ubuntu
      - pre-commit
      - build_conda_binaries:
          CI_TEST: true
      - clang_tidy
  nightly:
    triggers:
      - schedule:
          cron: "0 7 * * *"
          filters:
            branches:
              only: main
    jobs:
      - lab_build_habitat
      - install_and_test_ubuntu
      - update_docs:
          requires:
            - install_and_test_ubuntu
          filters:
            branches:
              only: main
      - build_conda_binaries:
          AIHABITAT_CONDA_CHN: aihabitat-nightly
          AIHABITAT_CONDA_CHN_PWD_VAR: AIHABITAT_NIGHTLY_CONDA_PWD
          NIGHTLY_FLAG: "--nightly"
          requires:
            - install_and_test_ubuntu
          filters:
            branches:
              only: main
      - build_conda_osx:
          AIHABITAT_CONDA_CHN: aihabitat-nightly
          AIHABITAT_CONDA_CHN_PWD_VAR: AIHABITAT_NIGHTLY_CONDA_PWD
          nightly: true
          CI_TEST: false
          requires:
            - build_conda_binaries
          filters:
            branches:
              only: main

  version_conda_release:
    jobs:
      - lab_build_habitat:
          filters: &version_filter
            tags:
              only: /^v[0-9]+(\.[0-9]+)*.*/ # v0.1.5-rc1
            branches:
              ignore: /.*/
      - install_and_test_ubuntu:
          filters: *version_filter
      - update_docs:
          requires:
            - lab_build_habitat
            - install_and_test_ubuntu
          filters: *version_filter
      - build_conda_binaries:
          requires:
            - lab_build_habitat
            - install_and_test_ubuntu
          filters: *version_filter
      - build_conda_osx:
          requires:
            -  build_conda_binaries
          filters: *version_filter
